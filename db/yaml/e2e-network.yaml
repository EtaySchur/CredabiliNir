kind: Namespace
apiVersion: v1
metadata:
  name: network-ns
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: network-ns
  name: frontend-policy
spec:
  policyTypes:
  - Ingress
  podSelector:
    matchLabels:
      role: frontend
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              role: client
      ports:
        - port:  80
          protocol: TCP
        - port:  80
          protocol: UDP
        - port:  84
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: network-ns
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    role: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: network-ns
spec:
  replicas: 1
  selector:
    matchLabels:
     role: backend
  template:
    metadata:
      labels:
        role: backend
    spec:
      containers:
      - name: backend
        image: calico/star-probe:v0.1.0
        imagePullPolicy: Always
        command:
        - probe
        - --http-port=6379
        - --urls=http://frontend.stars:80/status,http://backend.stars:6379/status,http://client.client:9000/status
        ports:
        - containerPort: 6379
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: network-ns
  name: frontend-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - host: front.app.example
    http:
      paths:
      - path: /frontend
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  namespace: network-ns
  name: denied-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - host: deny.app.example
    http:
      paths:
      - path: /deny
        pathType: Prefix
        backend:
          serviceName: frontend-deny
          servicePort: 9008
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-lb
  namespace: network-ns
spec:
  ports:
  - name: proxy
    port: 80
    protocol: TCP
    targetPort: 8000
  - name: proxy-ssl
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    role: frontend
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: network-ns
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    name: tcp1
    protocol: TCP
  - port: 80
    targetPort: 80
    name: udp1
    protocol: UDP
  - port: 84
    targetPort: 84
    name: port2
  - port: 88
    targetPort: 88
    name: port3

  selector:
    role: frontend
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-deny
  namespace: network-ns
spec:
  type: ClusterIP
  ports:
  - port: 9008
    targetPort: 9008
  selector:
    role: frontend

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: network-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      role: frontend
  template:
    metadata:
      labels:
        role: frontend
    spec:
      containers:
      - name: frontend
        image: calico/star-probe:v0.1.0
        imagePullPolicy: Always
        command:
        - probe
        - --http-port=80
        - --urls=http://frontend.stars:80/status,http://backend.stars:6379/status,http://client.client:9000/status
        ports:
        - containerPort: 80
---
kind: Namespace
apiVersion: v1
metadata:
  name: network-ns2
  labels:
    role: client
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: network-ns2
spec:
  replicas: 1
  selector:
    matchLabels:
      role: client
  template:
    metadata:
      labels:
        role: client
    spec:
      containers:
      - name: client
        image: calico/star-probe:v0.1.0
        imagePullPolicy: Always
        command:
        - probe
        - --urls=http://frontend.stars:80/status,http://backend.stars:6379/status
        ports:
        - containerPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  name: client
  namespace: network-ns2
spec:
  ports:
  - port: 9000
    targetPort: 9000
  selector:
    role: client

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: network-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: network-ns2
spec:
  podSelector: {}
  policyTypes:
  - Ingress
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: network-ns
  name: backend-policy
spec:
  policyTypes:
  - Egress
  podSelector:
    matchLabels:
      role: backend
  ingress:
    - from:
        - podSelector:
            matchLabels:
              role: frontend
      ports:
        - protocol: TCP
          port: 6379
